#pragma once

#include "../../../libraries/sdk/include/module-functions.h"

#define TASK_NAME_SPI "spi_service_task"
#define MAX_SIZE_BUS_NAME 30


// Протокол взаимодействия сервиса и клиента
// 1. Клиент посылает запрос открытия сессии open_spi, передавая имя шины (используется структура open_spi_t),
//    и параметры для настройки режима передачи по шине:
//    Частота тактования шины, число бит в слове, задержка после обмена данными по шине
// 2. Сервер отвечает числом в возвращаемом статусе (идентификатором сессии - индекс шины в списке открытых шин).
//    Если 0 то операция открытия не удалась.
// 3. Клиент посылает запрос на чтение данных из регистра data_request_spi (используется структура data_request_spi_t)
// 4. Сервер возвращает блок бинарных данных
// 5. Клиент уведомляет о завершении сессии close_spi
// 6. Сервер отвечает пустыми данными

// Тип данных передаваемых между тасками при синхронном обмене
typedef enum
{

    op_test_spi,
    op_open_spi,
    op_transfer_spi,
    op_close_spi

} operatation;

// Параметры для настройки режима передачи данных по шине spi
typedef struct
{
    unsigned int speed_hz;
    unsigned char bits_per_word;
    unsigned short delay_usecs;

} cfg_transfer_spi_t;

// Структура данных для открытия шины и задания режима её работы
// Клиент указывает имя шины и параметры передачи данных по ней
typedef struct
{
    // Структура с параметрами режима передачи по шине
    cfg_transfer_spi_t cfg_transfer_spi;

    // Имя шины
    char bus_name[MAX_SIZE_BUS_NAME];

} open_request_spi_t;


// Клиент указывает идентификатор сессии, длину передавемых данных, указатель на начало блока данных
// В время передачи данные по шине синхронно передаются из входного буфера и принимаются во входной.
typedef struct
{
    // Идентификатор сессии
    int session_id;

    // Клиент задает длину данных участвующих в передаче по шине
    int len_requested_data;
    
    // Первый байт начала блока данных
    char transfer_data;

} data_request_spi_t;
