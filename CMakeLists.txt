#--------------------------------------------------------------------
# This file was created as a part of the LinuxDrone project:
#                http://www.linuxdrone.org
#
# Distributed under the Creative Commons Attribution-ShareAlike 4.0
# International License (see accompanying License.txt file or a copy
# at http://creativecommons.org/licenses/by-sa/4.0/legalcode)
#
# The human-readable summary of (and not a substitute for) the
# license: http://creativecommons.org/licenses/by-sa/4.0/
#--------------------------------------------------------------------

#--------------------------------------------------------------------
# TODO:
#  - automatic download for toolchains and utilities (apart from git and cmake)
#  - automatic target environment download (for distributed rootfs image)
#  - compiler options (debug/release and others)
#  - configure: board type options (target)
#  - configure: debug/release options
#  - add javascript code install target
#--------------------------------------------------------------------

cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

project(linuxdrone)

# Extra cmake modules path (must be set by toolchain file passed from command line)
#set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/modules/" ${CMAKE_MODULE_PATH})

# Install path for relocatable copy (under the build directory)
set(CMAKE_INSTALL_PREFIX ${PROJECT_BINARY_DIR}/install/usr/local/${PROJECT_NAME})

# Library options (comment off to build static libraries)
set(BUILD_SHARED_LIBS TRUE)

option(BUILD_DOCUMENTATION "Create and install the HTML based API documentation (requires Doxygen)" OFF)

# Path to binary tools
IF(${CMAKE_HOST_SYSTEM} MATCHES "Windows")
    SET(SCP ${TLS_DIR}/pscp.exe)
    SET(NODEJS node)
ELSEIF(${CMAKE_HOST_SYSTEM} MATCHES "Linux")
    SET(SCP scp)
    SET(NODEJS nodejs)
ELSE()
    SET(SCP scp)
    SET(NODEJS /opt/local/bin/node)
ENDIF()

SET(DO_POST_BUILD NO)

#SET(URL_TARGET_SYSTEM root@vrubel.linuxdrone.org)
#SET(URL_TARGET_SYSTEM root@192.168.1.2)
#SET(SSH_PORT_TARGET_SYSTEM 22)

# Include cmake module for build Doxygen documentation
include(BuildDocumentation)

# MongoDB
# Libraries: ${MongoDB_LIBRARIES}
find_package(MongoDB REQUIRED)
include_directories(${INCLUDE_DIRECTORIES} ${MongoDB_INCLUDE_DIRS})

# MongoC
# Libraries: ${MongoC_LIBRARIES}
find_package(MongoC REQUIRED)
include_directories(${INCLUDE_DIRECTORIES} ${MongoC_INCLUDE_DIR})

# Boost
# Libraries: ${Boost_LIBRARIES}
#set(Boost_USE_STATIC_LIBS OFF) 
#find_package(Boost REQUIRED COMPONENTS system filesystem thread program_options)
#include_directories(${INCLUDE_DIRECTORIES} ${Boost_INCLUDE_DIRS})

# Xenomai libraries
# Libraries: ${XENOMAI_LIBRARY_NATIVE} ${XENOMAI_LIBRARY_XENOMAI}
find_package(Xenomai REQUIRED)
include_directories(${INCLUDE_DIRECTORIES} ${XENOMAI_INCLUDE_DIR})

# Threads
find_package(Threads)

# BSON
# Libraries: ${BSON_LIBRARIES}
find_package(BSON REQUIRED)
include_directories(${INCLUDE_DIRECTORIES} ${BSON_INCLUDE_DIR})

# WebSockets
# Libraries: ${WebSockets_LIBRARIES}
find_package(WebSockets REQUIRED)
include_directories(${INCLUDE_DIRECTORIES} ${WebSockets_INCLUDE_DIR})

# Link-only libraries (do not check headers, just link shared objects)
find_library(ZLIB_LIBRARIES z)
find_library(OPENSSL_LIBRARIES ssl)
find_library(CRYPTO_LIBRARIES crypto)

# RPATH handling to use relative paths in the install tree
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

# Project libraries
set(CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")
#add_subdirectory(${LIB_DIR}/core)
#add_subdirectory(${LIB_DIR}/sdk)
#add_subdirectory(${LIB_DIR}/dotnet-sdk)
add_subdirectory(${LIB_DIR}/sdk)

# Loadable modules (one level deeper than apps or libs)
set(CMAKE_INSTALL_RPATH "\$ORIGIN/../../lib")
#add_subdirectory(${MOD_DIR}/gy87)
add_subdirectory(${MOD_DIR}/rx-openlrs)
add_subdirectory(${MOD_DIR}/short_terminator)
add_subdirectory(${MOD_DIR}/c-gy87)
#add_subdirectory(${MOD_DIR}/test-params)
add_subdirectory(${MOD_DIR}/test-sender)
add_subdirectory(${MOD_DIR}/test-receiver)
add_subdirectory(${MOD_DIR}/test-sender-receiver)
#add_subdirectory(${MOD_DIR}/c-pru-pwmout)
#add_subdirectory(${MOD_DIR}/c-pru-pwmin)
add_subdirectory(${MOD_DIR}/c-pid)
add_subdirectory(${MOD_DIR}/c-sum-scale)
add_subdirectory(${MOD_DIR}/c-scale)
add_subdirectory(${MOD_DIR}/c-ms5611)
#add_subdirectory(${MOD_DIR}/MyModule)
#add_subdirectory(${MOD_DIR}/bmp180)
#add_subdirectory(${MOD_DIR}/ms5611)
#add_subdirectory(${MOD_DIR}/hmc5883)
#add_subdirectory(${MOD_DIR}/pwmoutput)
#add_subdirectory(${MOD_DIR}/PwmInput)
#add_subdirectory(${MOD_DIR}/SimpleTransform)
#add_subdirectory(${MOD_DIR}/SerialGps)
add_subdirectory(${MOD_DIR}/c-bmp180)
add_subdirectory(${MOD_DIR}/c-generator)
add_subdirectory(${MOD_DIR}/c-mpu9250)
add_subdirectory(${MOD_DIR}/attitude)

set(CMAKE_INSTALL_RPATH "\$ORIGIN/../lib")

# Host programms
add_subdirectory(${HST_DIR}/c-host)

# Services
add_subdirectory(${SVC_DIR}/telemetry)
add_subdirectory(${SVC_DIR}/i2c)
add_subdirectory(${SVC_DIR}/spi)

# Main project target
#add_subdirectory(${TGT_DIR}/beaglebone)
